#include <jni.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include "com_dreamteam_sqljbaseddb_repositories_NativeAdapter.h"

#define BUFSIZE 512

JNIEXPORT jobjectArray JNICALL Java_com_dreamteam_sqljbaseddb_repositories_NativeAdapter_getAll
        (JNIEnv* env,
         jclass clazz,
         jstring username,
         jstring password)
{
    const char *usernameNtv = (*env)->GetStringUTFChars(env, username, NULL);
    const char *passwordNtv = (*env)->GetStringUTFChars(env, password, NULL);

    EXEC SQL begin declare section;
    char user_name[BUFSIZE];
    char user_passwd[BUFSIZE];
    char databases[BUFSIZE][BUFSIZE];
    int num_databases = BUFSIZE;
    EXEC SQL end declare section;

    EXEC SQL DECLARE curs CURSOR FOR
        select dbname from get_all_databases();

    strncpy(user_name, usernameNtv, BUFSIZE - 1);
    user_name[BUFSIZE - 1] = 0;
    strncpy(user_passwd, passwordNtv, BUFSIZE - 1);
    user_passwd[BUFSIZE - 1] = 0;

    EXEC SQL whenever sqlerror goto error_lab;
    EXEC SQL connect to data_management as dm_conn user :user_name/:user_passwd;

    EXEC SQL select count(dbname) into :num_databases from get_all_databases();

    EXEC SQL OPEN curs;

    for (int i = 0; i < num_databases; i++)
    {
        EXEC SQL FETCH NEXT FROM curs INTO :databases[i];
    }

    for (int i = 0; i < num_databases; i++)
    {
        printf("%d %s\n", i, databases[i]);
    }

    EXEC SQL close curs;

    EXEC SQL disconnect dm_conn;

    (*env)->ReleaseStringUTFChars(env, username, usernameNtv);
    (*env)->ReleaseStringUTFChars(env, password, passwordNtv);

    jobjectArray ret = (jobjectArray) (*env)->NewObjectArray(env, num_databases, (*env)->FindClass(env, "java/lang/String"), (*env)->NewStringUTF(env, ""));

    for (int i = 0; i < num_databases; i++)
    {
        (*env)->SetObjectArrayElement(env, ret, i, (*env)->NewStringUTF(env, databases[i]));
    }

    return ret;

  error_lab:
    EXEC SQL disconnect dm_conn;
    printf("sqlcode=%d %s\n",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
    return NULL;
}

JNIEXPORT jboolean JNICALL Java_com_dreamteam_sqljbaseddb_repositories_NativeAdapter_test
        (JNIEnv* env,
         jclass clazz,
         jstring database,
         jstring username,
         jstring password)
{
    const char *databaseNtv = (*env)->GetStringUTFChars(env, database, NULL);
    const char *usernameNtv = (*env)->GetStringUTFChars(env, username, NULL);
    const char *passwordNtv = (*env)->GetStringUTFChars(env, password, NULL);

    EXEC SQL begin declare section;
    char database_name[BUFSIZE];
    char user_name[BUFSIZE];
    char user_passwd[BUFSIZE];
    EXEC SQL end declare section;

    strncpy(database_name, databaseNtv, BUFSIZE - 1);
    database_name[BUFSIZE - 1] = 0;
    strncpy(user_name, usernameNtv, BUFSIZE - 1);
    user_name[BUFSIZE - 1] = 0;
    strncpy(user_passwd, passwordNtv, BUFSIZE - 1);
    user_passwd[BUFSIZE - 1] = 0;

    EXEC SQL whenever sqlerror goto error_lab;
    EXEC SQL connect to data_management as dm_conn user :user_name/:user_passwd;
    EXEC SQL disconnect dm_conn;

    (*env)->ReleaseStringUTFChars(env, database, databaseNtv);
    (*env)->ReleaseStringUTFChars(env, username, usernameNtv);
    (*env)->ReleaseStringUTFChars(env, password, passwordNtv);

    return true;

  error_lab:
    EXEC SQL disconnect dm_conn;
    printf("sqlcode=%d %s\n",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
    return false;
}

JNIEXPORT jboolean JNICALL Java_com_dreamteam_sqljbaseddb_repositories_NativeAdapter_save
        (JNIEnv* env,
         jclass clazz,
         jstring database,
         jstring username,
         jstring password)
{
    const char *databaseNtv = (*env)->GetStringUTFChars(env, database, NULL);
    const char *usernameNtv = (*env)->GetStringUTFChars(env, username, NULL);
    const char *passwordNtv = (*env)->GetStringUTFChars(env, password, NULL);

    EXEC SQL begin declare section;
    char database_name[BUFSIZE];
    char user_name[BUFSIZE];
    char user_passwd[BUFSIZE];
    EXEC SQL end declare section;

    strncpy(database_name, databaseNtv, BUFSIZE - 1);
    database_name[BUFSIZE - 1] = 0;
    strncpy(user_name, usernameNtv, BUFSIZE - 1);
    user_name[BUFSIZE - 1] = 0;
    strncpy(user_passwd, passwordNtv, BUFSIZE - 1);
    user_passwd[BUFSIZE - 1] = 0;

    EXEC SQL connect to data_management as dm_conn user :user_name/:user_passwd;

    EXEC SQL whenever sqlerror goto error_lab;
    EXEC SQL select * from create_database(:database_name, :user_name, :user_passwd);

    EXEC SQL commit;
    EXEC SQL disconnect dm_conn;

    (*env)->ReleaseStringUTFChars(env, database, databaseNtv);
    (*env)->ReleaseStringUTFChars(env, username, usernameNtv);
    (*env)->ReleaseStringUTFChars(env, password, passwordNtv);

    return true;

  error_lab:
    EXEC SQL disconnect dm_conn;
    printf("sqlcode=%d %s\n",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
    return false;
}

JNIEXPORT jboolean JNICALL Java_com_dreamteam_sqljbaseddb_repositories_NativeAdapter_delete
        (JNIEnv* env,
         jclass clazz,
         jstring database,
         jstring username,
         jstring password)
{
    const char *databaseNtv = (*env)->GetStringUTFChars(env, database, NULL);
    const char *usernameNtv = (*env)->GetStringUTFChars(env, username, NULL);
    const char *passwordNtv = (*env)->GetStringUTFChars(env, password, NULL);

    EXEC SQL begin declare section;
    char database_name[BUFSIZE];
    char user_name[BUFSIZE];
    char user_passwd[BUFSIZE];
    EXEC SQL end declare section;

    strncpy(database_name, databaseNtv, BUFSIZE - 1);
    database_name[BUFSIZE - 1] = 0;
    strncpy(user_name, usernameNtv, BUFSIZE - 1);
    user_name[BUFSIZE - 1] = 0;
    strncpy(user_passwd, passwordNtv, BUFSIZE - 1);
    user_passwd[BUFSIZE - 1] = 0;

    EXEC SQL connect to data_management as dm_conn user :user_name/:user_passwd;

    EXEC SQL whenever sqlerror goto error_lab;
    EXEC SQL select * from delete_database(:database_name, :user_name, :user_passwd);

    EXEC SQL commit;
    EXEC SQL disconnect dm_conn;

    (*env)->ReleaseStringUTFChars(env, database, databaseNtv);
    (*env)->ReleaseStringUTFChars(env, username, usernameNtv);
    (*env)->ReleaseStringUTFChars(env, password, passwordNtv);

    return true;

  error_lab:
    EXEC SQL disconnect dm_conn;
    printf("sqlcode=%d %s\n",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
    return false;
}

JNIEXPORT jboolean JNICALL Java_com_dreamteam_sqljbaseddb_repositories_NativeAdapter_addItem
        (JNIEnv* env,
         jclass clazz,
         jstring database,
         jstring username,
         jstring password,
         jlong id,
         jstring name,
         jlong amount,
         jint price,
         jstring color,
         jboolean refurbished)
{
    const char *databaseNtv = (*env)->GetStringUTFChars(env, database, NULL);
    const char *usernameNtv = (*env)->GetStringUTFChars(env, username, NULL);
    const char *passwordNtv = (*env)->GetStringUTFChars(env, password, NULL);
    long idNtv = (long) id;
    const char *nameNtv = (*env)->GetStringUTFChars(env, name, NULL);
    long amountNtv = (long) amount;
    int priceNtv = (int) price;
    const char *colorNtv = (*env)->GetStringUTFChars(env, color, NULL);
    bool refurbishedNtv = (bool) refurbished;

    EXEC SQL begin declare section;
    char database_name[BUFSIZE];
    char user_name[BUFSIZE];
    char user_passwd[BUFSIZE];

    long item_id;
    char item_name[BUFSIZE];
    long item_amount;
    int item_price;
    char item_color[BUFSIZE];
    bool item_refurbished;
    EXEC SQL end declare section;

    strncpy(database_name, databaseNtv, BUFSIZE - 1);
    database_name[BUFSIZE - 1] = 0;
    strncpy(user_name, usernameNtv, BUFSIZE - 1);
    user_name[BUFSIZE - 1] = 0;
    strncpy(user_passwd, passwordNtv, BUFSIZE - 1);
    user_passwd[BUFSIZE - 1] = 0;

    item_id = idNtv;
    strncpy(item_name, nameNtv, BUFSIZE - 1);
    item_name[BUFSIZE - 1] = 0;
    item_amount = amountNtv;
    item_price = priceNtv;
    strncpy(item_color, colorNtv, BUFSIZE - 1);
    item_color[BUFSIZE - 1] = 0;
    item_refurbished = refurbishedNtv;

    EXEC SQL connect to data_management as dm_conn user :user_name/:user_passwd;

    EXEC SQL whenever sqlerror goto error_lab;
    EXEC SQL select * from insert_into_database(:database_name, :user_name, :user_passwd,  :item_id, :item_name, :item_amount, :item_price, :item_color, :item_refurbished);

    EXEC SQL commit;
    EXEC SQL disconnect dm_conn;

    (*env)->ReleaseStringUTFChars(env, database, databaseNtv);
    (*env)->ReleaseStringUTFChars(env, username, usernameNtv);
    (*env)->ReleaseStringUTFChars(env, password, passwordNtv);

    (*env)->ReleaseStringUTFChars(env, name, nameNtv);
    (*env)->ReleaseStringUTFChars(env, color, colorNtv);

    return true;

  error_lab:
    EXEC SQL disconnect dm_conn;
    printf("sqlcode=%d %s\n",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
    return false;
}

JNIEXPORT jboolean JNICALL Java_com_dreamteam_sqljbaseddb_repositories_NativeAdapter_deleteItem
        (JNIEnv* env,
         jclass clazz,
         jstring database,
         jstring username,
         jstring password,
         jstring paramName,
         jstring paramValue)
{
    const char *databaseNtv = (*env)->GetStringUTFChars(env, database, NULL);
    const char *usernameNtv = (*env)->GetStringUTFChars(env, username, NULL);
    const char *passwordNtv = (*env)->GetStringUTFChars(env, password, NULL);

    const char *paramNameNtv = (*env)->GetStringUTFChars(env, paramName, NULL);
    const char *paramValueNtv = (*env)->GetStringUTFChars(env, paramValue, NULL);

    EXEC SQL begin declare section;
    char database_name[BUFSIZE];
    char user_name[BUFSIZE];
    char user_passwd[BUFSIZE];

    char param_name[BUFSIZE];
    char param_value[BUFSIZE];
    EXEC SQL end declare section;

    strncpy(database_name, databaseNtv, BUFSIZE - 1);
    database_name[BUFSIZE - 1] = 0;
    strncpy(user_name, usernameNtv, BUFSIZE - 1);
    user_name[BUFSIZE - 1] = 0;
    strncpy(user_passwd, passwordNtv, BUFSIZE - 1);
    user_passwd[BUFSIZE - 1] = 0;

    strncpy(param_name, paramNameNtv, BUFSIZE - 1);
    user_name[BUFSIZE - 1] = 0;
    strncpy(param_value, paramValueNtv, BUFSIZE - 1);
    param_value[BUFSIZE - 1] = 0;

    EXEC SQL connect to data_management as dm_conn user :user_name/:user_passwd;

    EXEC SQL whenever sqlerror goto error_lab;
    EXEC SQL select * from delete_from_database_by_param(:database_name, :user_name, :user_passwd, :param_name, :param_value);

    EXEC SQL commit;
    EXEC SQL disconnect dm_conn;

    (*env)->ReleaseStringUTFChars(env, database, databaseNtv);
    (*env)->ReleaseStringUTFChars(env, username, usernameNtv);
    (*env)->ReleaseStringUTFChars(env, password, passwordNtv);

    (*env)->ReleaseStringUTFChars(env, paramName, paramNameNtv);
    (*env)->ReleaseStringUTFChars(env, paramValue, paramValueNtv);

    return true;

  error_lab:
    EXEC SQL disconnect dm_conn;
    printf("sqlcode=%d %s\n",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
    return false;
}

JNIEXPORT jboolean JNICALL Java_com_dreamteam_sqljbaseddb_repositories_NativeAdapter_addSuperuser
        (JNIEnv* env,
         jclass clazz,
         jstring usernameToSave,
         jstring passwordToSave,
         jstring authUsername,
         jstring authPassword)
{
    const char *usernameToSaveNtv = (*env)->GetStringUTFChars(env, usernameToSave, NULL);
    const char *passwordToSaveNtv = (*env)->GetStringUTFChars(env, passwordToSave, NULL);

    const char *usernameNtv = (*env)->GetStringUTFChars(env, authUsername, NULL);
    const char *passwordNtv = (*env)->GetStringUTFChars(env, authPassword, NULL);

    EXEC SQL begin declare section;
    char username_to_save[BUFSIZE];
    char password_to_save[BUFSIZE];
    char user_name[BUFSIZE];
    char user_passwd[BUFSIZE];
    EXEC SQL end declare section;

    strncpy(username_to_save, usernameToSaveNtv, BUFSIZE - 1);
    username_to_save[BUFSIZE - 1] = 0;
    strncpy(password_to_save, passwordToSaveNtv, BUFSIZE - 1);
    password_to_save[BUFSIZE - 1] = 0;

    strncpy(user_name, usernameNtv, BUFSIZE - 1);
    user_name[BUFSIZE - 1] = 0;
    strncpy(user_passwd, passwordNtv, BUFSIZE - 1);
    user_passwd[BUFSIZE - 1] = 0;

    EXEC SQL connect to data_management as dm_conn user :user_name/:user_passwd;

    EXEC SQL whenever sqlerror goto error_lab;
    EXEC SQL select * from add_superuser(:username_to_save, :password_to_save, :user_name, :user_passwd);

    EXEC SQL commit;
    EXEC SQL disconnect dm_conn;

    (*env)->ReleaseStringUTFChars(env, usernameToSave, usernameToSaveNtv);
    (*env)->ReleaseStringUTFChars(env, passwordToSave, passwordToSaveNtv);

    (*env)->ReleaseStringUTFChars(env, authUsername, usernameNtv);
    (*env)->ReleaseStringUTFChars(env, authPassword, passwordNtv);

    return true;

  error_lab:
    EXEC SQL disconnect dm_conn;
    printf("sqlcode=%d %s\n",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
    return false;
}

JNIEXPORT jboolean JNICALL Java_com_dreamteam_sqljbaseddb_repositories_NativeAdapter_addCasual
        (JNIEnv* env,
         jclass clazz,
         jstring usernameToSave,
         jstring passwordToSave,
         jstring authUsername,
         jstring authPassword,
         jstring database)
{
    const char *usernameToSaveNtv = (*env)->GetStringUTFChars(env, usernameToSave, NULL);
    const char *passwordToSaveNtv = (*env)->GetStringUTFChars(env, passwordToSave, NULL);

    const char *usernameNtv = (*env)->GetStringUTFChars(env, authUsername, NULL);
    const char *passwordNtv = (*env)->GetStringUTFChars(env, authPassword, NULL);
    const char *databaseNtv = (*env)->GetStringUTFChars(env, database, NULL);

    EXEC SQL begin declare section;
    char username_to_save[BUFSIZE];
    char password_to_save[BUFSIZE];
    char user_name[BUFSIZE];
    char user_passwd[BUFSIZE];
    char database_name[BUFSIZE];
    EXEC SQL end declare section;

    strncpy(username_to_save, usernameToSaveNtv, BUFSIZE - 1);
    username_to_save[BUFSIZE - 1] = 0;
    strncpy(password_to_save, passwordToSaveNtv, BUFSIZE - 1);
    password_to_save[BUFSIZE - 1] = 0;

    strncpy(user_name, usernameNtv, BUFSIZE - 1);
    user_name[BUFSIZE - 1] = 0;
    strncpy(user_passwd, passwordNtv, BUFSIZE - 1);
    user_passwd[BUFSIZE - 1] = 0;
    strncpy(database_name, databaseNtv, BUFSIZE - 1);
    database_name[BUFSIZE - 1] = 0;

    EXEC SQL connect to data_management as dm_conn user :user_name/:user_passwd;

    EXEC SQL whenever sqlerror goto error_lab;
    EXEC SQL select * from add_casual_to_database(:username_to_save, :password_to_save, :user_name, :user_passwd, :database_name);

    EXEC SQL commit;
    EXEC SQL disconnect dm_conn;

    (*env)->ReleaseStringUTFChars(env, usernameToSave, usernameToSaveNtv);
    (*env)->ReleaseStringUTFChars(env, passwordToSave, passwordToSaveNtv);

    (*env)->ReleaseStringUTFChars(env, authUsername, usernameNtv);
    (*env)->ReleaseStringUTFChars(env, authPassword, passwordNtv);
    (*env)->ReleaseStringUTFChars(env, database, databaseNtv);

    return true;

  error_lab:
    EXEC SQL disconnect dm_conn;
    printf("sqlcode=%d %s\n",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
    return false;
}